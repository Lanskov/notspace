import { Conversation } from '@grammyjs/conversations'
import { MyContext } from '../index'
import { InlineKeyboard } from 'grammy'
import { PhotoSize } from '@grammyjs/types'
import { SignupProfileDto } from '../../types/signup-profile.dto'
import { locationRepository, userRepository } from '../../prisma'
import { LocationDto } from '../../types/location.dto'
import { mainMenu } from '../menus/main.menu'

type SignupConversation = Conversation<MyContext>

export async function signup(
    conversation: SignupConversation,
    ctx: MyContext,
): Promise<void> {
    if (ctx.session.user) {
        await ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', {
            reply_markup: {
                keyboard: mainMenu,
            },
        })
        return
    }
    const controller = new SignupController(conversation)
    const profile = await controller.signup(ctx)
    if (profile) {
        await userRepository.save(profile)
        await ctx.reply(
            '–ì–æ—Ç–æ–≤–æ! üëç\n' +
                '–ö —Ç–≤–æ–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é Telegram —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∞–Ω–∫–µ—Ç–∞ not.space üëçüèª \n\n' +
                '–î–∞–ª—å—à–µ ‚Äì –ø–∞—Ä–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–µ—Ä–≤–∏—Å–æ–º, –∏ –º–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–ª–∞—Å—Å–Ω—ã–º–∏ –ª—é–¥—å–º–∏!',
        )
        await ctx.reply(
            'ü¶¶ –°–µ–π—á–∞—Å —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ 15%.\n\n' +
                '–í—ã–¥–µ–ª–∏ –º–∏–Ω—É—Ç–∫—É –∏ –∑–∞–ø–æ–ª–Ω–∏ –µ—ë –¥–æ –∫–æ–Ω—Ü–∞ ‚Äì –∫–∞–∫ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏ –±—ã—Å—Ç—Ä–µ–µ –∑–∞–≤–µ–¥—ë—à—å –ø–æ–ª–µ–∑–Ω—ã–µ/–ø—Ä–∏—è—Ç–Ω—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞' +
                ` –≤ –≥–æ—Ä–æ–¥–µ ${profile.location.city}.`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è',
                                url: 'https://ya.ru', //TODO add link
                            },
                        ],
                    ],
                },
            },
        )
        await ctx.reply(
            '–ê —Ç–µ–ø–µ—Ä—å –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:\n\n' +
                'üôÇ–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ù–æ–≤—ã–µ –ª—é–¥–∏¬ª\n\n' +
                'üíö–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —Å –∫–µ–º —Å–ª—É—á–∏–ª—Å—è –≤–∑–∞–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–í–∑–∞–∏–º–Ω—ã–µ¬ª\n\n' +
                'üë§–¢—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É, –Ω–∞–∂–∞–≤ ¬´–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å¬ª\n\n' +
                '‚≠êÔ∏è–ö–æ–º–∞–Ω–¥–∞ not.space –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª\n\n' +
                'üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –Ω–∞—Å, –∑–∞–∫—Ä–µ–ø–∏ –±–æ—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤.',
            { reply_markup: { keyboard: mainMenu } },
        )
    }
    return
}

class SignupController {
    constructor(private readonly conversation: SignupConversation) {}

    async signup(ctx: MyContext): Promise<SignupProfileDto | undefined> {
        if (ctx.from === undefined) {
            return undefined
        }
        const profile = new SignupProfileDto()
        profile.tgId = ctx.from.id
        profile.tgUsername = ctx.from.username ?? 'no name'
        profile.location = await this.getLocation(ctx)

        await ctx.reply(
            '–°—É–ø–µ—Ä! –ü–µ—Ä–≤–∞—è –ø–æ–¥–±–æ—Ä–∫–∞ –¥–ª—è —Ç–µ–±—è —É–∂–µ –≥–æ—Ç–æ–≤–∞ üòç\n\n' +
                '–ó–∞–≤–µ—Ä—à–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ—ë üëáüèª',
        )

        profile.fullName = await this.getName(ctx)
        profile.birthday = await this.getBirthday(ctx)
        profile.avatarFileId = await this.getAvatarFileId(ctx)
        // profile.phone = await this.getPhone(ctx)
        return profile
    }

    private async getName(ctx: MyContext): Promise<string> {
        await ctx.reply(
            '–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –£–∫–∞–∑—ã–≤–∞–π —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é ‚ú®\n\n' +
                '<i>–ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å <a href="#">–ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.</a></i>', //TODO add link
            {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '–í–∑—è—Ç—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram',
                                callback_data: 'from_tg',
                            },
                        ],
                    ],
                },
            },
        )
        const answer = await this.conversation.wait()
        if (answer.message?.text) {
            return answer.message.text
        } else if (answer.callbackQuery?.data === 'from_tg') {
            return `${answer.from?.first_name} ${answer.from?.last_name}`
        } else {
            return await this.getName(ctx)
        }
    }

    private async getAvatarFileId(
        ctx: MyContext,
        showButton = true,
    ): Promise<any> {
        const useTgAvatarCallbackQuery = 'signup:use_tg_avatar'
        await ctx.reply(
            '–ü—Ä–∏—à–ª–∏ 1 —Ç–≤–æ–µ —Ñ–æ—Ç–æ\n' + '–ï–≥–æ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –¥—Ä—É–≥–∏–µ –≥–æ—Å—Ç–∏',
            {
                reply_markup: showButton
                    ? new InlineKeyboard().text(
                          '–í–∑—è—Ç—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram',
                          useTgAvatarCallbackQuery,
                      )
                    : undefined,
            },
        )
        const avatarCtx = await this.conversation.wait()
        if (avatarCtx.message?.photo) {
            return this.getBestPhoto(avatarCtx.message.photo)
        } else if (avatarCtx.callbackQuery?.data === useTgAvatarCallbackQuery) {
            const photos = await ctx.getUserProfilePhotos()
            if (photos.total_count > 0) {
                return this.getBestPhoto(photos.photos[0])
            } else {
                await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram')
                return await this.getAvatarFileId(ctx, false)
            }
        } else {
            return await this.getAvatarFileId(ctx, showButton)
        }
    }

    private getBestPhoto(photos: PhotoSize[]): string {
        return photos.sort((p1, p2) => p2.width - p1.width)[0].file_id
    }

    // private async getPhone(ctx: MyContext): Promise<any> {
    //     await ctx.reply('–£–∫–∞–∂–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', {
    //         reply_markup: new Keyboard()
    //             .requestContact('–£–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω')
    //             .resized(),
    //     })
    //     const { message } = await this.conversation.waitFor('message:contact')
    //     const phone = message.contact?.phone_number
    //     return phone && message.contact.user_id === ctx.from?.id
    //         ? phone
    //         : await this.getPhone(ctx)
    // }

    private async getLocation(ctx: MyContext): Promise<LocationDto> {
        const countryList = await locationRepository.getCountries()
        const noLocationInlineBtn = {
            text: '–Ø –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ',
            callback_data: 'no_location',
        }
        await ctx.reply('–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ —Ç—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?', {
            reply_markup: {
                inline_keyboard: [
                    [
                        ...countryList.map(country => ({
                            text: country.name,
                            callback_data: country.id,
                        })),
                        noLocationInlineBtn,
                    ],
                ],
            },
        })
        const location = new LocationDto()
        const answerCountry = await this.conversation.waitFor(
            'callback_query:data',
        )
        const countryId = answerCountry.callbackQuery.data
        if (countryId === 'no_location') {
            return location
        }
        const availableCites = await locationRepository.getCitiesByCountryId(
            countryId,
        )
        if (availableCites) {
            await ctx.reply('–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã —Å–µ–π—á–∞—Å?', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            ...availableCites.map(city => ({
                                text: city.name,
                                callback_data: city.id,
                            })),
                            noLocationInlineBtn,
                        ],
                    ],
                },
            })
            const answerCityId = await this.conversation.waitFor(
                'callback_query:data',
            )
            const cityId = answerCityId.callbackQuery.data
            if (cityId === 'no_location') {
                return location
            }
            location.city = cityId
        }
        return location
    }

    private async getBirthday(ctx: MyContext): Promise<Date> {
        await ctx.reply(
            'üéÇ–£–∫–∞–∂–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n' + '–í —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì',
        )
        const answer = await this.conversation.form.text()
        const pattern = /^(\d{2})\.(\d{2})\.(\d{4})$/
        const dt = Date.parse(answer.replace(pattern, '$3-$2-$1'))
        return answer.match(pattern) && !isNaN(dt)
            ? new Date(dt)
            : await this.getBirthday(ctx)
    }
}
Footer
¬© 2022 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Doc
